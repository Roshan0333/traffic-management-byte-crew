{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  const percentage = level * 100; // Convert to percentage\n  if (percentage > 70) return 'red'; // High congestion\n  if (percentage > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\nconst MapView = ({\n  trafficData\n}) => {\n  _s();\n  const [mapCenter, setMapCenter] = useState([28.6139, 77.2090]); // Default center: Delhi\n\n  useEffect(() => {\n    // Dynamically calculate the center based on traffic data\n    if (trafficData.length > 0) {\n      const validCoords = trafficData.filter(data => typeof data.latitude === 'number' && typeof data.longitude === 'number');\n      if (validCoords.length > 0) {\n        const avgLat = validCoords.reduce((sum, data) => sum + data.latitude, 0) / validCoords.length;\n        const avgLon = validCoords.reduce((sum, data) => sum + data.longitude, 0) / validCoords.length;\n        setMapCenter([avgLat, avgLon]);\n      }\n    }\n  }, [trafficData]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: mapCenter,\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        congestion_level,\n        latitude,\n        longitude\n      } = data;\n\n      // Validate latitude and longitude\n      if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n        console.error('Invalid coordinates:', latitude, longitude);\n        return null; // Skip this entry if coordinates are invalid\n      }\n      const color = getIconColor(congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Incident: \", data.incident]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"cHflCYQZPgiqqvpPREjH2JExSPc=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getIconColor","level","percentage","MapView","trafficData","_s","mapCenter","setMapCenter","length","validCoords","filter","data","latitude","longitude","avgLat","reduce","sum","avgLon","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","index","congestion_level","console","error","color","icon","divIcon","className","html","iconSize","position","incident","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\r\nconst getIconColor = (level) => {\r\n    const percentage = level * 100; // Convert to percentage\r\n    if (percentage > 70) return 'red'; // High congestion\r\n    if (percentage > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\nconst MapView = ({ trafficData }) => {\r\n    const [mapCenter, setMapCenter] = useState([28.6139, 77.2090]); // Default center: Delhi\r\n\r\n    useEffect(() => {\r\n        // Dynamically calculate the center based on traffic data\r\n        if (trafficData.length > 0) {\r\n            const validCoords = trafficData.filter(\r\n                (data) => typeof data.latitude === 'number' && typeof data.longitude === 'number'\r\n            );\r\n            if (validCoords.length > 0) {\r\n                const avgLat = validCoords.reduce((sum, data) => sum + data.latitude, 0) / validCoords.length;\r\n                const avgLon = validCoords.reduce((sum, data) => sum + data.longitude, 0) / validCoords.length;\r\n                setMapCenter([avgLat, avgLon]);\r\n            }\r\n        }\r\n    }, [trafficData]);\r\n\r\n    return (\r\n        <MapContainer center={mapCenter} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { congestion_level, latitude, longitude } = data;\r\n\r\n                // Validate latitude and longitude\r\n                if (typeof latitude !== 'number' || typeof longitude !== 'number') {\r\n                    console.error('Invalid coordinates:', latitude, longitude);\r\n                    return null; // Skip this entry if coordinates are invalid\r\n                }\r\n\r\n                const color = getIconColor(congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                return (\r\n                    <Marker key={index} position={[latitude, longitude]} icon={icon}>\r\n                        <Popup>\r\n                            <span>Incident: {data.incident}</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}