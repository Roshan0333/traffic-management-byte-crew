{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Custom icon for congestion levels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  if (level > 70) return 'red'; // High congestion\n  if (level > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\nconst MapView = () => {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Fetch data from the API\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/congestion'); // Replace with your backend URL\n        const apiData = response.data;\n\n        // Manually add some data points\n        const manualData = [{\n          location: \"Connaught Place\",\n          congestion_level: 80,\n          // High congestion (red)\n          latitude: 28.6315,\n          longitude: 77.2167\n        }, {\n          location: \"India Gate\",\n          congestion_level: 50,\n          // Medium congestion (yellow)\n          latitude: 28.6129,\n          longitude: 77.2295\n        }, {\n          location: \"Red Fort\",\n          congestion_level: 25,\n          // Low congestion (green)\n          latitude: 28.6562,\n          longitude: 77.2410\n        }, {\n          location: \"Qutub Minar\",\n          congestion_level: 70,\n          // Medium congestion (yellow)\n          latitude: 28.5244,\n          longitude: 77.1855\n        }, {\n          location: \"Hauz Khas Village\",\n          congestion_level: 30,\n          // Low congestion (green)\n          latitude: 28.5543,\n          longitude: 77.1936\n        }];\n\n        // Combine the API data and manual data\n        setTrafficData([...apiData, ...manualData]);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching traffic data:', error);\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [28.6139, 77.2090],\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        congestion_level,\n        latitude,\n        longitude,\n        location\n      } = data;\n      const color = getIconColor(congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n      return latitude && longitude && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Location: \", location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 66\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Congestion Level: \", congestion_level]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"mMgL5dQ3az3RkNHOyc7qkhmzkZM=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","axios","L","jsxDEV","_jsxDEV","getIconColor","level","MapView","_s","trafficData","setTrafficData","isLoading","setIsLoading","fetchData","response","get","apiData","data","manualData","location","congestion_level","latitude","longitude","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","map","index","color","icon","divIcon","className","html","iconSize","position","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Custom icon for congestion levels\r\nconst getIconColor = (level) => {\r\n    if (level > 70) return 'red'; // High congestion\r\n    if (level > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\nconst MapView = () => {\r\n    const [trafficData, setTrafficData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Fetch data from the API\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/congestion'); // Replace with your backend URL\r\n                const apiData = response.data;\r\n                \r\n                // Manually add some data points\r\n                const manualData = [\r\n                    {\r\n                        location: \"Connaught Place\",\r\n                        congestion_level: 80,  // High congestion (red)\r\n                        latitude: 28.6315,\r\n                        longitude: 77.2167\r\n                    },\r\n                    {\r\n                        location: \"India Gate\",\r\n                        congestion_level: 50,  // Medium congestion (yellow)\r\n                        latitude: 28.6129,\r\n                        longitude: 77.2295\r\n                    },\r\n                    {\r\n                        location: \"Red Fort\",\r\n                        congestion_level: 25,  // Low congestion (green)\r\n                        latitude: 28.6562,\r\n                        longitude: 77.2410\r\n                    },\r\n                    {\r\n                        location: \"Qutub Minar\",\r\n                        congestion_level: 70,  // Medium congestion (yellow)\r\n                        latitude: 28.5244,\r\n                        longitude: 77.1855\r\n                    },\r\n                    {\r\n                        location: \"Hauz Khas Village\",\r\n                        congestion_level: 30,  // Low congestion (green)\r\n                        latitude: 28.5543,\r\n                        longitude: 77.1936\r\n                    }\r\n                ];\r\n\r\n                // Combine the API data and manual data\r\n                setTrafficData([...apiData, ...manualData]);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching traffic data:', error);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div>Loading traffic data...</div>;\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={[28.6139, 77.2090]} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { congestion_level, latitude, longitude, location } = data;\r\n                const color = getIconColor(congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                return (\r\n                    latitude && longitude && (\r\n                        <Marker key={index} position={[latitude, longitude]} icon={icon}>\r\n                            <Popup>\r\n                                <span>Location: {location}</span><br />\r\n                                <span>Congestion Level: {congestion_level}</span>\r\n                            </Popup>\r\n                        </Marker>\r\n                    )\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}