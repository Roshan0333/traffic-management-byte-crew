{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Custom icon for congestion levels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  if (level > 70) return 'red'; // High congestion\n  if (level > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\n\n// Example data for locations in Delhi with 3 red, 4 yellow, and 5 green markers\nconst trafficData = [\n// High congestion (red)\n{\n  latitude: 28.7041,\n  longitude: 77.1025,\n  predicted_congestion_level: 85\n},\n// Location 1\n{\n  latitude: 28.6139,\n  longitude: 77.2090,\n  predicted_congestion_level: 90\n},\n// Location 2\n{\n  latitude: 28.6448,\n  longitude: 77.2167,\n  predicted_congestion_level: 80\n},\n// Location 3\n\n// Medium congestion (yellow)\n{\n  latitude: 28.5355,\n  longitude: 77.3910,\n  predicted_congestion_level: 50\n},\n// Location 4\n{\n  latitude: 28.4595,\n  longitude: 77.0266,\n  predicted_congestion_level: 60\n},\n// Location 5\n{\n  latitude: 28.7041,\n  longitude: 77.2025,\n  predicted_congestion_level: 55\n},\n// Location 6\n{\n  latitude: 28.6692,\n  longitude: 77.4538,\n  predicted_congestion_level: 45\n},\n// Location 7\n\n// Low congestion (green)\n{\n  latitude: 28.7041,\n  longitude: 77.1028,\n  predicted_congestion_level: 25\n},\n// Location 8\n{\n  latitude: 28.4595,\n  longitude: 77.0466,\n  predicted_congestion_level: 10\n},\n// Location 9\n{\n  latitude: 28.5355,\n  longitude: 77.2920,\n  predicted_congestion_level: 15\n},\n// Location 10\n{\n  latitude: 28.6187,\n  longitude: 77.2110,\n  predicted_congestion_level: 20\n},\n// Location 11\n{\n  latitude: 28.6195,\n  longitude: 77.1025,\n  predicted_congestion_level: 5\n} // Location 12\n];\nconst MapView = () => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [28.6139, 77.2090],\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        predicted_congestion_level,\n        latitude,\n        longitude\n      } = data;\n      const color = getIconColor(predicted_congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Congestion Level: \", predicted_congestion_level]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getIconColor","level","trafficData","latitude","longitude","predicted_congestion_level","MapView","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","data","index","color","icon","divIcon","className","html","iconSize","position","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Custom icon for congestion levels\r\nconst getIconColor = (level) => {\r\n    if (level > 70) return 'red'; // High congestion\r\n    if (level > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\n// Example data for locations in Delhi with 3 red, 4 yellow, and 5 green markers\r\nconst trafficData = [\r\n    // High congestion (red)\r\n    { latitude: 28.7041, longitude: 77.1025, predicted_congestion_level: 85 }, // Location 1\r\n    { latitude: 28.6139, longitude: 77.2090, predicted_congestion_level: 90 }, // Location 2\r\n    { latitude: 28.6448, longitude: 77.2167, predicted_congestion_level: 80 }, // Location 3\r\n\r\n    // Medium congestion (yellow)\r\n    { latitude: 28.5355, longitude: 77.3910, predicted_congestion_level: 50 }, // Location 4\r\n    { latitude: 28.4595, longitude: 77.0266, predicted_congestion_level: 60 }, // Location 5\r\n    { latitude: 28.7041, longitude: 77.2025, predicted_congestion_level: 55 }, // Location 6\r\n    { latitude: 28.6692, longitude: 77.4538, predicted_congestion_level: 45 }, // Location 7\r\n\r\n    // Low congestion (green)\r\n    { latitude: 28.7041, longitude: 77.1028, predicted_congestion_level: 25 }, // Location 8\r\n    { latitude: 28.4595, longitude: 77.0466, predicted_congestion_level: 10 }, // Location 9\r\n    { latitude: 28.5355, longitude: 77.2920, predicted_congestion_level: 15 }, // Location 10\r\n    { latitude: 28.6187, longitude: 77.2110, predicted_congestion_level: 20 }, // Location 11\r\n    { latitude: 28.6195, longitude: 77.1025, predicted_congestion_level: 5 }   // Location 12\r\n];\r\n\r\nconst MapView = () => {\r\n    return (\r\n        <MapContainer center={[28.6139, 77.2090]} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { predicted_congestion_level, latitude, longitude } = data;\r\n                const color = getIconColor(predicted_congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                return (\r\n                    <Marker key={index} position={[latitude, longitude]} icon={icon}>\r\n                        <Popup>\r\n                            <span>Congestion Level: {predicted_congestion_level}</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}