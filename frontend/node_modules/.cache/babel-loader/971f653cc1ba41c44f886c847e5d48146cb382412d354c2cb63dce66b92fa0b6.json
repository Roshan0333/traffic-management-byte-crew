{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rashi\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\TrafficDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MapView from './MapView';\nimport ControlPanel from './ControlPanel';\nimport Alerts from './Alerts';\nimport '../styles/TrafficDashboard.css';\nimport socket from '../services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficDashboard() {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [startLocation, setStartLocation] = useState(null);\n  const [endLocation, setEndLocation] = useState(null);\n  useEffect(() => {\n    // Mock fetching data from a backend with lat/long data\n    const mockData = [];\n    for (let i = 1; i <= 100; i++) {\n      mockData.push({\n        location: `Intersection ${i}`,\n        congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\n        latitude: 28.6139 + Math.random() * 0.05 - 0.025,\n        longitude: 77.2090 + Math.random() * 0.05 - 0.025,\n        id: i\n      });\n    }\n    setTimeout(() => {\n      setTrafficData(mockData);\n      setFilteredData(mockData);\n      setIsLoading(false);\n    }, 2000);\n    return () => {\n      socket.onmessage = null;\n    };\n  }, []);\n  const handleFilterChange = level => {\n    if (level === '') {\n      setFilteredData(trafficData);\n    } else {\n      const filtered = trafficData.filter(data => data.congestionLevel === level);\n      setFilteredData(filtered);\n    }\n  };\n  const handleOptimizeRoutes = () => {\n    const optimizedRoutes = trafficData.filter(data => data.congestionLevel === 'Low');\n    if (optimizedRoutes.length > 0) {\n      setFilteredData(optimizedRoutes);\n    } else {\n      alert('No low congestion routes available at the moment.');\n    }\n  };\n  const handleSelectStart = locationId => {\n    const location = trafficData.find(data => data.id === parseInt(locationId));\n    setStartLocation(location);\n  };\n  const handleSelectEnd = locationId => {\n    const location = trafficData.find(data => data.id === parseInt(locationId));\n    setEndLocation(location);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Traffic Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {\n      trafficData: filteredData,\n      startLocation: startLocation,\n      endLocation: endLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      trafficData: trafficData,\n      onFilterChange: handleFilterChange,\n      onOptimizeRoutes: handleOptimizeRoutes,\n      onRefreshData: () => setFilteredData(trafficData),\n      onSendAlert: () => console.log('Send Alert'),\n      onSelectStart: handleSelectStart,\n      onSelectEnd: handleSelectEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(TrafficDashboard, \"LdrV+d8tQOUD013CpILSDRJTGKM=\");\n_c = TrafficDashboard;\nexport default TrafficDashboard;\nvar _c;\n$RefreshReg$(_c, \"TrafficDashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapView","ControlPanel","Alerts","socket","jsxDEV","_jsxDEV","TrafficDashboard","_s","trafficData","setTrafficData","filteredData","setFilteredData","isLoading","setIsLoading","startLocation","setStartLocation","endLocation","setEndLocation","mockData","i","push","location","congestionLevel","latitude","Math","random","longitude","id","setTimeout","onmessage","handleFilterChange","level","filtered","filter","data","handleOptimizeRoutes","optimizedRoutes","length","alert","handleSelectStart","locationId","find","parseInt","handleSelectEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onOptimizeRoutes","onRefreshData","onSendAlert","console","log","onSelectStart","onSelectEnd","_c","$RefreshReg$"],"sources":["C:/Users/rashi/smart-traffic-management/frontend/src/components/TrafficDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MapView from './MapView';\r\nimport ControlPanel from './ControlPanel';\r\nimport Alerts from './Alerts';\r\nimport '../styles/TrafficDashboard.css';\r\nimport socket from '../services/WebSocketService';\r\n\r\nfunction TrafficDashboard() {\r\n    const [trafficData, setTrafficData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [startLocation, setStartLocation] = useState(null);\r\n    const [endLocation, setEndLocation] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Mock fetching data from a backend with lat/long data\r\n        const mockData = [];\r\n        for (let i = 1; i <= 100; i++) {\r\n            mockData.push({\r\n                location: `Intersection ${i}`,\r\n                congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\r\n                latitude: 28.6139 + Math.random() * 0.05 - 0.025,\r\n                longitude: 77.2090 + Math.random() * 0.05 - 0.025,\r\n                id: i\r\n            });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            setTrafficData(mockData);\r\n            setFilteredData(mockData);\r\n            setIsLoading(false);\r\n        }, 2000);\r\n\r\n        return () => {\r\n            socket.onmessage = null;\r\n        };\r\n    }, []);\r\n\r\n    const handleFilterChange = (level) => {\r\n        if (level === '') {\r\n            setFilteredData(trafficData);\r\n        } else {\r\n            const filtered = trafficData.filter(data => data.congestionLevel === level);\r\n            setFilteredData(filtered);\r\n        }\r\n    };\r\n\r\n    const handleOptimizeRoutes = () => {\r\n        const optimizedRoutes = trafficData.filter(data => data.congestionLevel === 'Low');\r\n        if (optimizedRoutes.length > 0) {\r\n            setFilteredData(optimizedRoutes);\r\n        } else {\r\n            alert('No low congestion routes available at the moment.');\r\n        }\r\n    };\r\n\r\n    const handleSelectStart = (locationId) => {\r\n        const location = trafficData.find(data => data.id === parseInt(locationId));\r\n        setStartLocation(location);\r\n    };\r\n\r\n    const handleSelectEnd = (locationId) => {\r\n        const location = trafficData.find(data => data.id === parseInt(locationId));\r\n        setEndLocation(location);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading traffic data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"traffic-dashboard\">\r\n            <h1>Smart Traffic Management Dashboard</h1>\r\n            <MapView\r\n                trafficData={filteredData}\r\n                startLocation={startLocation}\r\n                endLocation={endLocation}\r\n            />\r\n            <ControlPanel\r\n                trafficData={trafficData}\r\n                onFilterChange={handleFilterChange}\r\n                onOptimizeRoutes={handleOptimizeRoutes}\r\n                onRefreshData={() => setFilteredData(trafficData)}\r\n                onSendAlert={() => console.log('Send Alert')}\r\n                onSelectStart={handleSelectStart}\r\n                onSelectEnd={handleSelectEnd}\r\n            />\r\n            <Alerts trafficData={filteredData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrafficDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,gCAAgC;AACvC,OAAOC,MAAM,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMmB,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC3BD,QAAQ,CAACE,IAAI,CAAC;QACVC,QAAQ,EAAE,gBAAgBF,CAAC,EAAE;QAC7BG,eAAe,EAAEH,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAGA,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,KAAK;QACxEI,QAAQ,EAAE,OAAO,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;QAChDC,SAAS,EAAE,OAAO,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;QACjDE,EAAE,EAAER;MACR,CAAC,CAAC;IACN;IAEAS,UAAU,CAAC,MAAM;MACbnB,cAAc,CAACS,QAAQ,CAAC;MACxBP,eAAe,CAACO,QAAQ,CAAC;MACzBL,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACTV,MAAM,CAAC0B,SAAS,GAAG,IAAI;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IAClC,IAAIA,KAAK,KAAK,EAAE,EAAE;MACdpB,eAAe,CAACH,WAAW,CAAC;IAChC,CAAC,MAAM;MACH,MAAMwB,QAAQ,GAAGxB,WAAW,CAACyB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACZ,eAAe,KAAKS,KAAK,CAAC;MAC3EpB,eAAe,CAACqB,QAAQ,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,eAAe,GAAG5B,WAAW,CAACyB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACZ,eAAe,KAAK,KAAK,CAAC;IAClF,IAAIc,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5B1B,eAAe,CAACyB,eAAe,CAAC;IACpC,CAAC,MAAM;MACHE,KAAK,CAAC,mDAAmD,CAAC;IAC9D;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAIC,UAAU,IAAK;IACtC,MAAMnB,QAAQ,GAAGb,WAAW,CAACiC,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACP,EAAE,KAAKe,QAAQ,CAACF,UAAU,CAAC,CAAC;IAC3EzB,gBAAgB,CAACM,QAAQ,CAAC;EAC9B,CAAC;EAED,MAAMsB,eAAe,GAAIH,UAAU,IAAK;IACpC,MAAMnB,QAAQ,GAAGb,WAAW,CAACiC,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACP,EAAE,KAAKe,QAAQ,CAACF,UAAU,CAAC,CAAC;IAC3EvB,cAAc,CAACI,QAAQ,CAAC;EAC5B,CAAC;EAED,IAAIT,SAAS,EAAE;IACX,oBAAOP,OAAA;MAAKuC,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjE;EAEA,oBACI5C,OAAA;IAAKuC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9BxC,OAAA;MAAAwC,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3C5C,OAAA,CAACL,OAAO;MACJQ,WAAW,EAAEE,YAAa;MAC1BI,aAAa,EAAEA,aAAc;MAC7BE,WAAW,EAAEA;IAAY;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACF5C,OAAA,CAACJ,YAAY;MACTO,WAAW,EAAEA,WAAY;MACzB0C,cAAc,EAAEpB,kBAAmB;MACnCqB,gBAAgB,EAAEhB,oBAAqB;MACvCiB,aAAa,EAAEA,CAAA,KAAMzC,eAAe,CAACH,WAAW,CAAE;MAClD6C,WAAW,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAE;MAC7CC,aAAa,EAAEjB,iBAAkB;MACjCkB,WAAW,EAAEd;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACF5C,OAAA,CAACH,MAAM;MAACM,WAAW,EAAEE;IAAa;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEd;AAAC1C,EAAA,CAnFQD,gBAAgB;AAAAoD,EAAA,GAAhBpD,gBAAgB;AAqFzB,eAAeA,gBAAgB;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}