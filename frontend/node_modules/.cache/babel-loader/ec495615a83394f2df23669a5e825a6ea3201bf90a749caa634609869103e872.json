{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\TrafficDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MapView from './MapView';\nimport ControlPanel from './ControlPanel';\nimport Alerts from './Alerts';\nimport '../styles/TrafficDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficDashboard() {\n  _s();\n  const [trafficPredictions, setTrafficPredictions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [minLat, setMinLat] = useState(27.5); // Set your desired min latitude\n  const [maxLat, setMaxLat] = useState(27.6); // Set your desired max latitude\n  const [minLng, setMinLng] = useState(-48.2); // Set your desired min longitude\n  const [maxLng, setMaxLng] = useState(-48.1); // Set your desired max longitude\n\n  useEffect(() => {\n    const fetchTrafficPredictions = async () => {\n      try {\n        const response = await axios.get('/api/congestion', {\n          params: {\n            minLat,\n            maxLat,\n            minLng,\n            maxLng\n          }\n        });\n        setTrafficPredictions(response.data);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching traffic predictions:', error);\n        setIsLoading(false);\n      }\n    };\n    fetchTrafficPredictions();\n  }, [minLat, maxLat, minLng, maxLng]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Traffic Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {\n      trafficData: trafficPredictions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      trafficData: trafficPredictions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(TrafficDashboard, \"rPU+rw2bbbKOzAZsyk6B6y6KwNA=\");\n_c = TrafficDashboard;\nexport default TrafficDashboard;\nvar _c;\n$RefreshReg$(_c, \"TrafficDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MapView","ControlPanel","Alerts","jsxDEV","_jsxDEV","TrafficDashboard","_s","trafficPredictions","setTrafficPredictions","isLoading","setIsLoading","minLat","setMinLat","maxLat","setMaxLat","minLng","setMinLng","maxLng","setMaxLng","fetchTrafficPredictions","response","get","params","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","trafficData","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/TrafficDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MapView from './MapView';\r\nimport ControlPanel from './ControlPanel';\r\nimport Alerts from './Alerts';\r\nimport '../styles/TrafficDashboard.css';\r\n\r\nfunction TrafficDashboard() {\r\n    const [trafficPredictions, setTrafficPredictions] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [minLat, setMinLat] = useState(27.5); // Set your desired min latitude\r\n    const [maxLat, setMaxLat] = useState(27.6); // Set your desired max latitude\r\n    const [minLng, setMinLng] = useState(-48.2); // Set your desired min longitude\r\n    const [maxLng, setMaxLng] = useState(-48.1); // Set your desired max longitude\r\n\r\n    useEffect(() => {\r\n        const fetchTrafficPredictions = async () => {\r\n            try {\r\n                const response = await axios.get('/api/congestion', {\r\n                    params: { minLat, maxLat, minLng, maxLng },\r\n                });\r\n                setTrafficPredictions(response.data);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching traffic predictions:', error);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchTrafficPredictions();\r\n    }, [minLat, maxLat, minLng, maxLng]);\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading traffic data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"traffic-dashboard\">\r\n            <h1>Smart Traffic Management Dashboard</h1>\r\n            <MapView trafficData={trafficPredictions} />\r\n            <ControlPanel />\r\n            <Alerts trafficData={trafficPredictions} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrafficDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE7CC,SAAS,CAAC,MAAM;IACZ,MAAMqB,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,iBAAiB,EAAE;UAChDC,MAAM,EAAE;YAAEX,MAAM;YAAEE,MAAM;YAAEE,MAAM;YAAEE;UAAO;QAC7C,CAAC,CAAC;QACFT,qBAAqB,CAACY,QAAQ,CAACG,IAAI,CAAC;QACpCb,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOc,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3Dd,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDS,uBAAuB,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACR,MAAM,EAAEE,MAAM,EAAEE,MAAM,EAAEE,MAAM,CAAC,CAAC;EAEpC,IAAIR,SAAS,EAAE;IACX,oBAAOL,OAAA;MAAKsB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjE;EAEA,oBACI3B,OAAA;IAAKsB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9BvB,OAAA;MAAAuB,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3C3B,OAAA,CAACJ,OAAO;MAACgC,WAAW,EAAEzB;IAAmB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5C3B,OAAA,CAACH,YAAY;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChB3B,OAAA,CAACF,MAAM;MAAC8B,WAAW,EAAEzB;IAAmB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd;AAACzB,EAAA,CArCQD,gBAAgB;AAAA4B,EAAA,GAAhB5B,gBAAgB;AAuCzB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}