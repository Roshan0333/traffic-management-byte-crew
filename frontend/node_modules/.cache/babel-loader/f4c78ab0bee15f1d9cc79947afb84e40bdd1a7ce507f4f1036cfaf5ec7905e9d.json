{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  const percentage = level * 100; // Convert to percentage\n  if (percentage > 70) return 'red'; // High congestion\n  if (percentage > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\nconst MapView = ({\n  trafficData\n}) => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [27.5361, -48.1736],\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        congestion_level,\n        latitude,\n        longitude\n      } = data;\n\n      // Validate latitude and longitude\n      if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n        console.error('Invalid coordinates:', latitude, longitude);\n        return null; // Skip this entry if coordinates are invalid\n      }\n      const color = getIconColor(congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n\n      // Use both latitude and longitude as part of the key for uniqueness\n      const markerKey = `${latitude},${longitude}`;\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Weather Condition: \", data.weather_condition]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Incident: \", data.incident]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)\n      }, markerKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getIconColor","level","percentage","MapView","trafficData","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","data","index","congestion_level","latitude","longitude","console","error","color","icon","divIcon","className","html","iconSize","markerKey","position","weather_condition","incident","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\r\nconst getIconColor = (level) => {\r\n    const percentage = level * 100; // Convert to percentage\r\n    if (percentage > 70) return 'red'; // High congestion\r\n    if (percentage > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\nconst MapView = ({ trafficData }) => {\r\n    return (\r\n        <MapContainer center={[27.5361, -48.1736]} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { congestion_level, latitude, longitude } = data;\r\n\r\n                // Validate latitude and longitude\r\n                if (typeof latitude !== 'number' || typeof longitude !== 'number') {\r\n                    console.error('Invalid coordinates:', latitude, longitude);\r\n                    return null; // Skip this entry if coordinates are invalid\r\n                }\r\n\r\n                const color = getIconColor(congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                // Use both latitude and longitude as part of the key for uniqueness\r\n                const markerKey = `${latitude},${longitude}`;\r\n\r\n                return (\r\n                    <Marker key={markerKey} position={[latitude, longitude]} icon={icon}>\r\n                        <Popup>\r\n                            <span>Weather Condition: {data.weather_condition}</span>\r\n                            <br />\r\n                            <span>Incident: {data.incident}</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}