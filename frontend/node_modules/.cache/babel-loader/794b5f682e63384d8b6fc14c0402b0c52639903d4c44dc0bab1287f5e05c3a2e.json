{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rashi\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\TrafficDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MapView from './MapView';\nimport ControlPanel from './ControlPanel';\nimport Alerts from './Alerts';\nimport '../styles/TrafficDashboard.css';\nimport socket from '../services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficDashboard() {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [startCoordinates, setStartCoordinates] = useState(null);\n  const [endCoordinates, setEndCoordinates] = useState(null);\n  useEffect(() => {\n    const mockData = [];\n    for (let i = 1; i <= 100; i++) {\n      mockData.push({\n        location: `Intersection ${i}`,\n        congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\n        latitude: 28.6139 + Math.random() * 0.05 - 0.025,\n        longitude: 77.2090 + Math.random() * 0.05 - 0.025,\n        id: i\n      });\n    }\n    setTimeout(() => {\n      setTrafficData(mockData);\n      setFilteredData(mockData);\n      setIsLoading(false);\n    }, 2000);\n    return () => {\n      socket.onmessage = null;\n    };\n  }, []);\n  const handleFilterChange = level => {\n    if (level === '') {\n      setFilteredData(trafficData);\n    } else {\n      const filtered = trafficData.filter(data => data.congestionLevel === level);\n      setFilteredData(filtered);\n    }\n  };\n  const geocodeLocation = async (locationName, setCoordinates) => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\n        params: {\n          q: locationName,\n          format: 'json',\n          addressdetails: 1,\n          limit: 1\n        }\n      });\n      const data = response.data[0];\n      if (data) {\n        setCoordinates({\n          latitude: parseFloat(data.lat),\n          longitude: parseFloat(data.lon),\n          name: locationName\n        });\n      } else {\n        alert('Location not found');\n      }\n    } catch (error) {\n      console.error('Error fetching geocode data:', error);\n      alert('Error fetching location data. Please try again.');\n    }\n  };\n  const handleSelectStart = locationName => {\n    geocodeLocation(locationName, setStartCoordinates);\n  };\n  const handleSelectEnd = locationName => {\n    geocodeLocation(locationName, setEndCoordinates);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Traffic Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {\n      trafficData: filteredData,\n      startCoordinates: startCoordinates,\n      endCoordinates: endCoordinates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onFilterChange: handleFilterChange,\n      onOptimizeRoutes: () => console.log('Optimize Routes'),\n      onRefreshData: () => setFilteredData(trafficData),\n      onSendAlert: () => console.log('Send Alert'),\n      onSelectStart: handleSelectStart,\n      onSelectEnd: handleSelectEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(TrafficDashboard, \"g8nHTOg8PSoTiGdFLJvK0A/phfo=\");\n_c = TrafficDashboard;\nexport default TrafficDashboard;\nvar _c;\n$RefreshReg$(_c, \"TrafficDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MapView","ControlPanel","Alerts","socket","jsxDEV","_jsxDEV","TrafficDashboard","_s","trafficData","setTrafficData","filteredData","setFilteredData","isLoading","setIsLoading","startCoordinates","setStartCoordinates","endCoordinates","setEndCoordinates","mockData","i","push","location","congestionLevel","latitude","Math","random","longitude","id","setTimeout","onmessage","handleFilterChange","level","filtered","filter","data","geocodeLocation","locationName","setCoordinates","response","get","params","q","format","addressdetails","limit","parseFloat","lat","lon","name","alert","error","console","handleSelectStart","handleSelectEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onOptimizeRoutes","log","onRefreshData","onSendAlert","onSelectStart","onSelectEnd","_c","$RefreshReg$"],"sources":["C:/Users/rashi/smart-traffic-management/frontend/src/components/TrafficDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MapView from './MapView';\r\nimport ControlPanel from './ControlPanel';\r\nimport Alerts from './Alerts';\r\nimport '../styles/TrafficDashboard.css';\r\nimport socket from '../services/WebSocketService';\r\n\r\nfunction TrafficDashboard() {\r\n    const [trafficData, setTrafficData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [startCoordinates, setStartCoordinates] = useState(null);\r\n    const [endCoordinates, setEndCoordinates] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const mockData = [];\r\n        for (let i = 1; i <= 100; i++) {\r\n            mockData.push({\r\n                location: `Intersection ${i}`,\r\n                congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\r\n                latitude: 28.6139 + Math.random() * 0.05 - 0.025,\r\n                longitude: 77.2090 + Math.random() * 0.05 - 0.025,\r\n                id: i\r\n            });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            setTrafficData(mockData);\r\n            setFilteredData(mockData);\r\n            setIsLoading(false);\r\n        }, 2000);\r\n\r\n        return () => {\r\n            socket.onmessage = null;\r\n        };\r\n    }, []);\r\n\r\n    const handleFilterChange = (level) => {\r\n        if (level === '') {\r\n            setFilteredData(trafficData);\r\n        } else {\r\n            const filtered = trafficData.filter(data => data.congestionLevel === level);\r\n            setFilteredData(filtered);\r\n        }\r\n    };\r\n\r\n    const geocodeLocation = async (locationName, setCoordinates) => {\r\n        try {\r\n            const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\r\n                params: {\r\n                    q: locationName,\r\n                    format: 'json',\r\n                    addressdetails: 1,\r\n                    limit: 1\r\n                }\r\n            });\r\n            const data = response.data[0];\r\n            if (data) {\r\n                setCoordinates({\r\n                    latitude: parseFloat(data.lat),\r\n                    longitude: parseFloat(data.lon),\r\n                    name: locationName\r\n                });\r\n            } else {\r\n                alert('Location not found');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching geocode data:', error);\r\n            alert('Error fetching location data. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleSelectStart = (locationName) => {\r\n        geocodeLocation(locationName, setStartCoordinates);\r\n    };\r\n\r\n    const handleSelectEnd = (locationName) => {\r\n        geocodeLocation(locationName, setEndCoordinates);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading traffic data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"traffic-dashboard\">\r\n            <h1>Smart Traffic Management Dashboard</h1>\r\n            <MapView\r\n                trafficData={filteredData}\r\n                startCoordinates={startCoordinates}\r\n                endCoordinates={endCoordinates}\r\n            />\r\n            <ControlPanel\r\n                onFilterChange={handleFilterChange}\r\n                onOptimizeRoutes={() => console.log('Optimize Routes')}\r\n                onRefreshData={() => setFilteredData(trafficData)}\r\n                onSendAlert={() => console.log('Send Alert')}\r\n                onSelectStart={handleSelectStart}\r\n                onSelectEnd={handleSelectEnd}\r\n            />\r\n            <Alerts trafficData={filteredData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrafficDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}