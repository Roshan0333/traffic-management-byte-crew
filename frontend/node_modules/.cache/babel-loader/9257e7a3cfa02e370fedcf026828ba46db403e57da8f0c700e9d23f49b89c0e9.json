{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport MarkerClusterGroup from 'react-leaflet-markercluster'; // Change this line\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\n\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  const percentage = level * 100; // Convert to percentage\n  if (percentage > 70) return 'red'; // High congestion\n  if (percentage > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\nconst MapView = ({\n  trafficData,\n  isLoading\n}) => {\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading map data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [27.5361, -48.1736],\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n      children: trafficData.map(data => {\n        const {\n          congestion_level,\n          latitude,\n          longitude,\n          weather_condition,\n          incident,\n          sensor_id\n        } = data;\n\n        // Validate latitude and longitude\n        if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n          console.error('Invalid coordinates:', latitude, longitude);\n          return null; // Skip this entry if coordinates are invalid\n        }\n        const color = getIconColor(congestion_level);\n        const icon = L.divIcon({\n          className: 'custom-icon',\n          html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n          iconSize: [20, 20]\n        });\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [latitude, longitude],\n          icon: icon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Weather Condition: \", weather_condition]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Incident: \", incident]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)\n        }, sensor_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","MarkerClusterGroup","L","jsxDEV","_jsxDEV","getIconColor","level","percentage","MapView","trafficData","isLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","map","data","congestion_level","latitude","longitude","weather_condition","incident","sensor_id","console","error","color","icon","divIcon","html","iconSize","position","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport MarkerClusterGroup from 'react-leaflet-markercluster'; // Change this line\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\r\n\r\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\r\nconst getIconColor = (level) => {\r\n    const percentage = level * 100; // Convert to percentage\r\n    if (percentage > 70) return 'red'; // High congestion\r\n    if (percentage > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\nconst MapView = ({ trafficData, isLoading }) => {\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading map data...</div>;\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={[27.5361, -48.1736]} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            <MarkerClusterGroup>\r\n                {trafficData.map((data) => {\r\n                    const { congestion_level, latitude, longitude, weather_condition, incident, sensor_id } = data;\r\n\r\n                    // Validate latitude and longitude\r\n                    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\r\n                        console.error('Invalid coordinates:', latitude, longitude);\r\n                        return null; // Skip this entry if coordinates are invalid\r\n                    }\r\n\r\n                    const color = getIconColor(congestion_level);\r\n                    const icon = L.divIcon({\r\n                        className: 'custom-icon',\r\n                        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                        iconSize: [20, 20],\r\n                    });\r\n\r\n                    return (\r\n                        <Marker key={sensor_id} position={[latitude, longitude]} icon={icon}>\r\n                            <Popup>\r\n                                <span>Weather Condition: {weather_condition}</span>\r\n                                <br />\r\n                                <span>Incident: {incident}</span>\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n            </MarkerClusterGroup>\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}