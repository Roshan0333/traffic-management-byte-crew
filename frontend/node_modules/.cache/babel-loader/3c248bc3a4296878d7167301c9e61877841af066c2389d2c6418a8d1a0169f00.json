{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Custom icon for congestion levels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  if (level > 70) return 'red'; // High congestion\n  if (level > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\n\n// Sample traffic data with 5 locations in Delhi\nconst sampleTrafficData = [{\n  latitude: 28.6139,\n  longitude: 77.2090,\n  predicted_congestion_level: 85,\n  name: 'India Gate'\n}, {\n  latitude: 28.7041,\n  longitude: 77.1025,\n  predicted_congestion_level: 60,\n  name: 'Red Fort'\n}, {\n  latitude: 28.5562,\n  longitude: 77.1000,\n  predicted_congestion_level: 45,\n  name: 'Qutub Minar'\n}, {\n  latitude: 28.5244,\n  longitude: 77.1855,\n  predicted_congestion_level: 25,\n  name: 'Lotus Temple'\n}, {\n  latitude: 28.6430,\n  longitude: 77.2200,\n  predicted_congestion_level: 15,\n  name: 'Chandni Chowk'\n}];\nconst MapView = ({\n  trafficData = sampleTrafficData\n}) => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [28.6139, 77.2090],\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        predicted_congestion_level,\n        latitude,\n        longitude,\n        name\n      } = data;\n      const color = getIconColor(predicted_congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [name, \": Congestion Level: \", predicted_congestion_level]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getIconColor","level","sampleTrafficData","latitude","longitude","predicted_congestion_level","name","MapView","trafficData","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","data","index","color","icon","divIcon","className","html","iconSize","position","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Custom icon for congestion levels\r\nconst getIconColor = (level) => {\r\n    if (level > 70) return 'red'; // High congestion\r\n    if (level > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\n// Sample traffic data with 5 locations in Delhi\r\nconst sampleTrafficData = [\r\n    { latitude: 28.6139, longitude: 77.2090, predicted_congestion_level: 85, name: 'India Gate' },\r\n    { latitude: 28.7041, longitude: 77.1025, predicted_congestion_level: 60, name: 'Red Fort' },\r\n    { latitude: 28.5562, longitude: 77.1000, predicted_congestion_level: 45, name: 'Qutub Minar' },\r\n    { latitude: 28.5244, longitude: 77.1855, predicted_congestion_level: 25, name: 'Lotus Temple' },\r\n    { latitude: 28.6430, longitude: 77.2200, predicted_congestion_level: 15, name: 'Chandni Chowk' },\r\n];\r\n\r\nconst MapView = ({ trafficData = sampleTrafficData }) => {\r\n    return (\r\n        <MapContainer center={[28.6139, 77.2090]} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { predicted_congestion_level, latitude, longitude, name } = data;\r\n                const color = getIconColor(predicted_congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                return (\r\n                    <Marker key={index} position={[latitude, longitude]} icon={icon}>\r\n                        <Popup>\r\n                            <span>{name}: Congestion Level: {predicted_congestion_level}</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}