{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rashi\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\TrafficDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MapView from './MapView';\nimport ControlPanel from './ControlPanel';\nimport Alerts from './Alerts';\nimport '../styles/TrafficDashboard.css';\nimport socket from '../services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficDashboard() {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // WebSocket message handling\n    socket.onmessage = event => {\n      const newTrafficData = JSON.parse(event.data);\n      setTrafficData(newTrafficData);\n      setFilteredData(newTrafficData); // Initially, show all data\n      setIsLoading(false); // Update loading state based on WebSocket data\n    };\n\n    // Cleanup\n    return () => {\n      socket.onmessage = null;\n    };\n  }, []);\n  const handleFilterChange = level => {\n    if (level === '') {\n      setFilteredData(trafficData); // Show all data if no filter is selected\n    } else {\n      const filtered = trafficData.filter(data => data.congestionLevel === level);\n      setFilteredData(filtered); // Show filtered data\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Traffic Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onFilterChange: handleFilterChange,\n      onOptimizeRoutes: () => console.log('Optimize Routes'),\n      onRefreshData: () => console.log('Refreshing Data...') // Clear console log for user feedback\n      ,\n      onSendAlert: () => console.log('Send Alert')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(TrafficDashboard, \"Q+qDFUDA5yPmsQrE//uXpb2PlhE=\");\n_c = TrafficDashboard;\nexport default TrafficDashboard;\nvar _c;\n$RefreshReg$(_c, \"TrafficDashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapView","ControlPanel","Alerts","socket","jsxDEV","_jsxDEV","TrafficDashboard","_s","trafficData","setTrafficData","filteredData","setFilteredData","isLoading","setIsLoading","onmessage","event","newTrafficData","JSON","parse","data","handleFilterChange","level","filtered","filter","congestionLevel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onOptimizeRoutes","console","log","onRefreshData","onSendAlert","_c","$RefreshReg$"],"sources":["C:/Users/rashi/smart-traffic-management/frontend/src/components/TrafficDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MapView from './MapView';\r\nimport ControlPanel from './ControlPanel';\r\nimport Alerts from './Alerts';\r\nimport '../styles/TrafficDashboard.css';\r\nimport socket from '../services/WebSocketService';\r\n\r\nfunction TrafficDashboard() {\r\n  const [trafficData, setTrafficData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // WebSocket message handling\r\n    socket.onmessage = (event) => {\r\n      const newTrafficData = JSON.parse(event.data);\r\n      setTrafficData(newTrafficData);\r\n      setFilteredData(newTrafficData); // Initially, show all data\r\n      setIsLoading(false); // Update loading state based on WebSocket data\r\n    };\r\n\r\n    // Cleanup\r\n    return () => {\r\n      socket.onmessage = null;\r\n    };\r\n  }, []);\r\n\r\n  const handleFilterChange = (level) => {\r\n    if (level === '') {\r\n      setFilteredData(trafficData); // Show all data if no filter is selected\r\n    } else {\r\n      const filtered = trafficData.filter(data => data.congestionLevel === level);\r\n      setFilteredData(filtered); // Show filtered data\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\">Loading traffic data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"traffic-dashboard\">\r\n      <h1>Smart Traffic Management Dashboard</h1>\r\n      <MapView trafficData={filteredData} />\r\n      <ControlPanel\r\n        onFilterChange={handleFilterChange}\r\n        onOptimizeRoutes={() => console.log('Optimize Routes')}\r\n        onRefreshData={() => console.log('Refreshing Data...')} // Clear console log for user feedback\r\n        onSendAlert={() => console.log('Send Alert')}\r\n      />\r\n      <Alerts trafficData={filteredData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrafficDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}