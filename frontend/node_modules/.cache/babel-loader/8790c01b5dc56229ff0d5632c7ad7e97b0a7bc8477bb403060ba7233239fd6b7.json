{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\n// src/components/MapView.js\n\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Set the default icon for the markers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Define bounding box for Delhi\nconst delhiBounds = {\n  latMin: 28.3922,\n  // Minimum latitude\n  latMax: 28.8835,\n  // Maximum latitude\n  lngMin: 76.8377,\n  // Minimum longitude\n  lngMax: 77.2671 // Maximum longitude\n};\nconst getRandomCoordinates = () => {\n  const latitude = Math.random() * (delhiBounds.latMax - delhiBounds.latMin) + delhiBounds.latMin;\n  const longitude = Math.random() * (delhiBounds.lngMax - delhiBounds.lngMin) + delhiBounds.lngMin;\n  return {\n    latitude,\n    longitude\n  };\n};\nconst MapView = () => {\n  _s();\n  const [markers, setMarkers] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [randomPoints, setRandomPoints] = useState([]);\n  const handleMapClick = event => {\n    const {\n      lat,\n      lng\n    } = event.latlng;\n    if (markers.length < 2) {\n      setMarkers(prev => [...prev, {\n        latitude: lat,\n        longitude: lng\n      }]);\n    }\n  };\n  useEffect(() => {\n    // Generate random points in Delhi\n    const points = Array.from({\n      length: 50\n    }, getRandomCoordinates); // Generate 50 random points\n    setRandomPoints(points);\n  }, []);\n  useEffect(() => {\n    if (markers.length === 2) {\n      const routeCoordinates = [[markers[0].latitude, markers[0].longitude], [markers[1].latitude, markers[1].longitude]];\n      setRoute(routeCoordinates);\n    }\n  }, [markers]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [28.6139, 77.2090] // Center of Delhi\n    ,\n    zoom: 12,\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    },\n    onClick: handleMapClick,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), randomPoints.map((point, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [point.latitude, point.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [\"Random Point \", index + 1, \": \", point.latitude.toFixed(4), \", \", point.longitude.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [marker.latitude, marker.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [\"Marker \", index + 1, \": \", marker.latitude.toFixed(4), \", \", marker.longitude.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)), route.length === 2 && /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: route,\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"+kRsCdAkigU3KAlSAUQAgHbyw3U=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","Polyline","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","delhiBounds","latMin","latMax","lngMin","lngMax","getRandomCoordinates","latitude","Math","random","longitude","MapView","_s","markers","setMarkers","route","setRoute","randomPoints","setRandomPoints","handleMapClick","event","lat","lng","latlng","length","prev","points","Array","from","routeCoordinates","center","zoom","style","height","width","onClick","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","point","index","position","toFixed","marker","positions","color","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["// src/components/MapView.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Set the default icon for the markers\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Define bounding box for Delhi\r\nconst delhiBounds = {\r\n    latMin: 28.3922, // Minimum latitude\r\n    latMax: 28.8835, // Maximum latitude\r\n    lngMin: 76.8377, // Minimum longitude\r\n    lngMax: 77.2671  // Maximum longitude\r\n};\r\n\r\nconst getRandomCoordinates = () => {\r\n    const latitude = Math.random() * (delhiBounds.latMax - delhiBounds.latMin) + delhiBounds.latMin;\r\n    const longitude = Math.random() * (delhiBounds.lngMax - delhiBounds.lngMin) + delhiBounds.lngMin;\r\n    return { latitude, longitude };\r\n};\r\n\r\nconst MapView = () => {\r\n    const [markers, setMarkers] = useState([]);\r\n    const [route, setRoute] = useState([]);\r\n    const [randomPoints, setRandomPoints] = useState([]);\r\n\r\n    const handleMapClick = (event) => {\r\n        const { lat, lng } = event.latlng;\r\n        if (markers.length < 2) {\r\n            setMarkers((prev) => [...prev, { latitude: lat, longitude: lng }]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Generate random points in Delhi\r\n        const points = Array.from({ length: 50 }, getRandomCoordinates); // Generate 50 random points\r\n        setRandomPoints(points);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (markers.length === 2) {\r\n            const routeCoordinates = [\r\n                [markers[0].latitude, markers[0].longitude],\r\n                [markers[1].latitude, markers[1].longitude]\r\n            ];\r\n            setRoute(routeCoordinates);\r\n        }\r\n    }, [markers]);\r\n\r\n    return (\r\n        <MapContainer\r\n            center={[28.6139, 77.2090]} // Center of Delhi\r\n            zoom={12}\r\n            style={{ height: \"500px\", width: \"100%\" }}\r\n            onClick={handleMapClick}\r\n        >\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {randomPoints.map((point, index) => (\r\n                <Marker key={index} position={[point.latitude, point.longitude]}>\r\n                    <Popup>\r\n                        Random Point {index + 1}: {point.latitude.toFixed(4)}, {point.longitude.toFixed(4)}\r\n                    </Popup>\r\n                </Marker>\r\n            ))}\r\n            {markers.map((marker, index) => (\r\n                <Marker key={index} position={[marker.latitude, marker.longitude]}>\r\n                    <Popup>\r\n                        Marker {index + 1}: {marker.latitude.toFixed(4)}, {marker.longitude.toFixed(4)}\r\n                    </Popup>\r\n                </Marker>\r\n            ))}\r\n            {route.length === 2 && (\r\n                <Polyline positions={route} color=\"blue\" />\r\n            )}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}