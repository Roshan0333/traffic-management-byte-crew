{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rashi\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\TrafficDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MapView from './MapView';\nimport ControlPanel from './ControlPanel';\nimport Alerts from './Alerts';\nimport '../styles/TrafficDashboard.css';\nimport socket from '../services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficDashboard() {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // WebSocket message handling\n    socket.onmessage = event => {\n      const newTrafficData = JSON.parse(event.data);\n      setTrafficData(newTrafficData);\n      setFilteredData(newTrafficData); // Initially, show all data\n    };\n\n    // Mock fetching data from a backend with lat/long data\n    const mockData = [];\n    for (let i = 1; i <= 100; i++) {\n      mockData.push({\n        location: `Intersection ${i}`,\n        congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\n        latitude: 28.6139 + Math.random() * 0.05 - 0.025,\n        longitude: 77.2090 + Math.random() * 0.05 - 0.025,\n        id: i\n      });\n    }\n    setTimeout(() => {\n      setTrafficData(mockData);\n      setFilteredData(mockData); // Show all data after loading\n      setIsLoading(false);\n    }, 2000);\n    return () => {\n      socket.onmessage = null;\n    };\n  }, []);\n  const handleFilterChange = level => {\n    if (level === '') {\n      setFilteredData(trafficData); // Show all data if no filter is selected\n    } else {\n      const filtered = trafficData.filter(data => data.congestionLevel === level);\n      setFilteredData(filtered); // Show filtered data\n    }\n  };\n  const handleOptimizeRoutes = () => {\n    const optimizedRoutes = trafficData.filter(data => data.congestionLevel === 'Low');\n    if (optimizedRoutes.length > 0) {\n      setFilteredData(optimizedRoutes);\n    } else {\n      alert('No low congestion routes available at the moment.');\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading traffic data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Traffic Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapView, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onFilterChange: handleFilterChange,\n      onOptimizeRoutes: handleOptimizeRoutes,\n      onRefreshData: () => setFilteredData(trafficData),\n      onSendAlert: () => console.log('Send Alert')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      trafficData: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(TrafficDashboard, \"Q+qDFUDA5yPmsQrE//uXpb2PlhE=\");\n_c = TrafficDashboard;\nexport default TrafficDashboard;\nvar _c;\n$RefreshReg$(_c, \"TrafficDashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapView","ControlPanel","Alerts","socket","jsxDEV","_jsxDEV","TrafficDashboard","_s","trafficData","setTrafficData","filteredData","setFilteredData","isLoading","setIsLoading","onmessage","event","newTrafficData","JSON","parse","data","mockData","i","push","location","congestionLevel","latitude","Math","random","longitude","id","setTimeout","handleFilterChange","level","filtered","filter","handleOptimizeRoutes","optimizedRoutes","length","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onOptimizeRoutes","onRefreshData","onSendAlert","console","log","_c","$RefreshReg$"],"sources":["C:/Users/rashi/smart-traffic-management/frontend/src/components/TrafficDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MapView from './MapView';\r\nimport ControlPanel from './ControlPanel';\r\nimport Alerts from './Alerts';\r\nimport '../styles/TrafficDashboard.css';\r\nimport socket from '../services/WebSocketService';\r\n\r\nfunction TrafficDashboard() {\r\n    const [trafficData, setTrafficData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // WebSocket message handling\r\n        socket.onmessage = (event) => {\r\n            const newTrafficData = JSON.parse(event.data);\r\n            setTrafficData(newTrafficData);\r\n            setFilteredData(newTrafficData); // Initially, show all data\r\n        };\r\n\r\n        // Mock fetching data from a backend with lat/long data\r\n        const mockData = [];\r\n        for (let i = 1; i <= 100; i++) {\r\n            mockData.push({\r\n                location: `Intersection ${i}`,\r\n                congestionLevel: i % 3 === 0 ? 'High' : i % 2 === 0 ? 'Moderate' : 'Low',\r\n                latitude: 28.6139 + Math.random() * 0.05 - 0.025,\r\n                longitude: 77.2090 + Math.random() * 0.05 - 0.025,\r\n                id: i\r\n            });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            setTrafficData(mockData);\r\n            setFilteredData(mockData); // Show all data after loading\r\n            setIsLoading(false);\r\n        }, 2000);\r\n\r\n        return () => {\r\n            socket.onmessage = null;\r\n        };\r\n    }, []);\r\n\r\n    const handleFilterChange = (level) => {\r\n        if (level === '') {\r\n            setFilteredData(trafficData); // Show all data if no filter is selected\r\n        } else {\r\n            const filtered = trafficData.filter(data => data.congestionLevel === level);\r\n            setFilteredData(filtered); // Show filtered data\r\n        }\r\n    };\r\n\r\n    const handleOptimizeRoutes = () => {\r\n        const optimizedRoutes = trafficData.filter(data => data.congestionLevel === 'Low');\r\n        if (optimizedRoutes.length > 0) {\r\n            setFilteredData(optimizedRoutes);\r\n        } else {\r\n            alert('No low congestion routes available at the moment.');\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading traffic data...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"traffic-dashboard\">\r\n            <h1>Smart Traffic Management Dashboard</h1>\r\n            <MapView trafficData={filteredData} />\r\n            <ControlPanel\r\n                onFilterChange={handleFilterChange}\r\n                onOptimizeRoutes={handleOptimizeRoutes}\r\n                onRefreshData={() => setFilteredData(trafficData)}\r\n                onSendAlert={() => console.log('Send Alert')}\r\n            />\r\n            <Alerts trafficData={filteredData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrafficDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}