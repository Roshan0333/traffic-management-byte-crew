{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gulsan\\\\Desktop\\\\AIML\\\\ha\\\\smart-traffic-management\\\\smart-traffic-management\\\\frontend\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getIconColor = level => {\n  const percentage = level * 100; // Convert to percentage\n  if (percentage > 70) return 'red'; // High congestion\n  if (percentage > 30) return 'yellow'; // Medium congestion\n  return 'green'; // Low congestion\n};\nconst MapView = () => {\n  _s();\n  const [trafficData, setTrafficData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([28.6139, 77.2090]); // Default to Delhi center\n\n  // Fetch traffic data from API or database\n  useEffect(() => {\n    // Replace with your API endpoint or database fetching logic\n    fetch('/api/traffic-data') // Example API endpoint\n    .then(response => response.json()).then(data => {\n      setTrafficData(data);\n\n      // Center the map based on fetched data\n      if (data.length > 0) {\n        const validCoords = data.filter(entry => typeof entry.latitude === 'number' && typeof entry.longitude === 'number');\n        if (validCoords.length > 0) {\n          const avgLat = validCoords.reduce((sum, entry) => sum + entry.latitude, 0) / validCoords.length;\n          const avgLon = validCoords.reduce((sum, entry) => sum + entry.longitude, 0) / validCoords.length;\n          setMapCenter([avgLat, avgLon]);\n        }\n      }\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: mapCenter,\n    zoom: 12,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), trafficData.map((data, index) => {\n      const {\n        congestion_level,\n        latitude,\n        longitude,\n        incident\n      } = data;\n\n      // Validate latitude and longitude\n      if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n        console.error('Invalid coordinates:', latitude, longitude);\n        return null; // Skip invalid entries\n      }\n      const color = getIconColor(congestion_level);\n      const icon = L.divIcon({\n        className: 'custom-icon',\n        html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\n        iconSize: [20, 20]\n      });\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: icon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Incident: \", incident]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"yIAHDh20uy819YSHyb/s0YPzzVE=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getIconColor","level","percentage","MapView","_s","trafficData","setTrafficData","mapCenter","setMapCenter","fetch","then","response","json","data","length","validCoords","filter","entry","latitude","longitude","avgLat","reduce","sum","avgLon","catch","error","console","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","index","congestion_level","incident","color","icon","divIcon","className","html","iconSize","position","_c","$RefreshReg$"],"sources":["C:/Users/Gulsan/Desktop/AIML/ha/smart-traffic-management/smart-traffic-management/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Function to determine the icon color based on congestion level (0.0 to 1.0)\r\nconst getIconColor = (level) => {\r\n    const percentage = level * 100; // Convert to percentage\r\n    if (percentage > 70) return 'red'; // High congestion\r\n    if (percentage > 30) return 'yellow'; // Medium congestion\r\n    return 'green'; // Low congestion\r\n};\r\n\r\nconst MapView = () => {\r\n    const [trafficData, setTrafficData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState([28.6139, 77.2090]); // Default to Delhi center\r\n\r\n    // Fetch traffic data from API or database\r\n    useEffect(() => {\r\n        // Replace with your API endpoint or database fetching logic\r\n        fetch('/api/traffic-data')  // Example API endpoint\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setTrafficData(data);\r\n                \r\n                // Center the map based on fetched data\r\n                if (data.length > 0) {\r\n                    const validCoords = data.filter(\r\n                        (entry) => typeof entry.latitude === 'number' && typeof entry.longitude === 'number'\r\n                    );\r\n                    if (validCoords.length > 0) {\r\n                        const avgLat = validCoords.reduce((sum, entry) => sum + entry.latitude, 0) / validCoords.length;\r\n                        const avgLon = validCoords.reduce((sum, entry) => sum + entry.longitude, 0) / validCoords.length;\r\n                        setMapCenter([avgLat, avgLon]);\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => console.error('Error fetching data:', error));\r\n    }, []);\r\n\r\n    return (\r\n        <MapContainer center={mapCenter} zoom={12} style={{ height: '500px', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n            />\r\n            {trafficData.map((data, index) => {\r\n                const { congestion_level, latitude, longitude, incident } = data;\r\n\r\n                // Validate latitude and longitude\r\n                if (typeof latitude !== 'number' || typeof longitude !== 'number') {\r\n                    console.error('Invalid coordinates:', latitude, longitude);\r\n                    return null; // Skip invalid entries\r\n                }\r\n\r\n                const color = getIconColor(congestion_level);\r\n                const icon = L.divIcon({\r\n                    className: 'custom-icon',\r\n                    html: `<div style=\"background-color: ${color}; width: 20px; height: 20px; border-radius: 50%;\"></div>`,\r\n                    iconSize: [20, 20],\r\n                });\r\n\r\n                return (\r\n                    <Marker key={index} position={[latitude, longitude]} icon={icon}>\r\n                        <Popup>\r\n                            <span>Incident: {incident}</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                );\r\n            })}\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}